{"version":3,"sources":["components/gameOfLife/cell/cell.jsx","components/gameOfLife/headerfooter/header.jsx","components/gameOfLife/headerfooter/footer.jsx","components/gameOfLife/gameOfLife.jsx","App.js","reportWebVitals.js","index.js"],"names":["Cell","state","id","props","divId","styling","backgroundColor","onMouseDown","this","onMouseEnter","onMouseUp","life","className","style","onContextMenu","e","preventDefault","Component","Header","class","href","display","fontStyle","Footer","role","Controls","aria-label","type","width","onClick","start","pause","reset","GameOfLife","grid","mouseDown","running","timeOut","neighbours","makeGrid","x","y","row","currentRow","col","push","setState","changeCell","handleMouseDown","newGrid","timeoutHandler","window","setTimeout","runStep","count","i","neighbour","rown","coln","console","log","oldGrid","newRow","countLivingNeighbours","living","componentDidMount","startGame","pauseGame","map","rowIdx","colIdx","cell_id","handleMouseEnter","handleMouseUp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acadbd6c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./cell.css\";\n\nclass Cell extends Component {\n  /** Cell - represents a cell on the board.  Coloured based on\n   * property for life passed in\n   */\n  state = {\n    id: this.props.id,\n    divId: \"cell:\" + this.props.id[0] + \",\" + this.props.id[1],\n  };\n  styling = {\n    backgroundColor: \"black\",\n  };\n\n  contextMenu() {\n    return false;\n  }\n\n  render() {\n    const onMouseDown = this.props.onMouseDown;\n    const onMouseEnter = this.props.onMouseEnter;\n    const onMouseUp = this.props.onMouseUp;\n    const styling = {\n      backgroundColor: this.props.life === \"dead\" ? \"black\" : \"white\",\n    };\n    return (\n      <div\n        id={this.state.divId}\n        className=\"cell\"\n        style={styling}\n        onMouseDown={() => onMouseDown(this.state.id[0], this.state.id[1])}\n        onMouseEnter={() => onMouseEnter(this.state.id[0], this.state.id[1])}\n        onMouseUp={() => onMouseUp()}\n        onContextMenu={(e) => e.preventDefault()}\n      ></div>\n    );\n  }\n}\n\nexport default Cell;\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  /** Header renders some text about the game of life, and an alert\n   * warning currently WIP\n   */\n  state = {};\n  render() {\n    return (\n      <div>\n        <header>\n          <h1>Conway's Game of Life</h1>\n        </header>\n        <p class=\"mini-margin\">\n          Conway's Game of Life (aka <em>Life</em>) was created by{\" \"}\n          <a href=\"https://en.wikipedia.org/wiki/John_Horton_Conway\">\n            {\" \"}\n            John Conway\n          </a>\n          . The idea is to simulate life in a 2d grid with a set of simple\n          rules:\n          <ul\n            style={{\n              display: \"inline\",\n              fontStyle: \"italic\",\n            }}\n          >\n            <li>A live cell with less than 2 living neighbours dies.</li>\n            <li>A live cell with 2 or 3 live neighbours survives.</li>\n            <li>A live cell with 4+ live neighbours dies.</li>\n            <li>A dead cell with 3 live neighbours comes back to life. </li>\n          </ul>\n          To use this simulation, click on the cells in the grid to bring them\n          to life, and click the start button below to start the simulation.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  /** Footer - provides a couple of links to wikipedia and my website */\n  state = {};\n  render() {\n    return (\n      <div class=\"mini-margin\">\n        <p>\n          This was produced by Robert Soane to get exposure to React JS. You can\n          find the code on my{\" \"}\n          <a href=\"https://github.com/robertpsoane/game-of-life\">GitHub</a>. To\n          see more of my work, checkout{\" \"}\n          <a href=\"https://robertsoane.me\">robertsoane.me</a>\n        </p>\n        <div class=\"alert alert-warning\" role=\"alert\">\n          Note: This has been redesigned. The latest version is{\" \"}\n          <a href=\"https://robertsoane.me/game-of-life/\">here</a>.\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Cell from \"./cell/cell\";\nimport Header from \"./headerfooter/header\";\nimport Footer from \"./headerfooter/footer\";\nimport \"./gameOfLife.css\";\n\nconst WIDTH = 50;\nconst HEIGHT = 25;\n\nclass Controls extends Component {\n  /** Set of control buttons, each are passed a function call via props */\n  state = {};\n  render() {\n    return (\n      <div>\n        <div\n          class=\"btn-group mini-margin\"\n          role=\"group\"\n          aria-label=\"Basic example\"\n        >\n          <button\n            type=\"button\"\n            class=\"btn btn-success\"\n            style={{ width: 100 }}\n            onClick={this.props.start}\n          >\n            Start\n          </button>\n\n          <button\n            type=\"button\"\n            class=\"btn btn-primary\"\n            style={{ width: 100 }}\n            onClick={this.props.pause}\n          >\n            Pause\n          </button>\n\n          <button\n            type=\"button\"\n            class=\"btn btn-secondary\"\n            style={{ width: 100 }}\n            onClick={this.props.reset}\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass GameOfLife extends Component {\n  /** Main entry point to the app. */\n\n  // Maintains state of grid, timeout, whether game is running and\n  // whether mouse button currently down\n  state = {\n    grid: [],\n    mouseDown: false,\n    running: false,\n    timeOut: 250,\n    neighbours: [\n      [1, 1],\n      [1, 0],\n      [1, -1],\n      [0, -1],\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, 1],\n    ],\n  };\n\n  componentDidMount() {\n    /** Runs on load.  Creates grid and sets initial states.  Also used for\n     * resetting app  */\n    const grid = this.makeGrid(WIDTH, HEIGHT);\n    this.setState({ grid: grid, mouseDown: false, running: false });\n  }\n\n  handleMouseDown(row, col) {\n    /** Called by cells when clicked - sets mouseDown to true and starts\n     * to change state */\n    this.setState({ mouseDown: true, grid: this.changeCell(row, col) });\n  }\n\n  handleMouseUp() {\n    /** Sets mouseDown false when mouse button released */\n    this.setState({ mouseDown: false });\n  }\n\n  handleMouseEnter(row, col) {\n    /** Called when mouse over a cell.  If mouse is down, then 'clicks' cell */\n    if (!this.state.mouseDown) return;\n    this.handleMouseDown(row, col);\n  }\n\n  changeCell(row, col) {\n    /** Takes a cell and flips value from alive to dead and vice\n     * versa */\n\n    let newGrid = this.state.grid;\n    // updates grid switching value of element\n    if (newGrid[row][col][0] === 0) {\n      newGrid[row][col][0] = 1;\n    } else {\n      newGrid[row][col][0] = 0;\n    }\n    return newGrid;\n  }\n\n  makeGrid = (x, y) => {\n    /** Produces a grid of dead cells with x columns and y rows */\n    const grid = [];\n    for (let row = 0; row < y; row++) {\n      const currentRow = [];\n      for (let col = 0; col < x; col++) {\n        currentRow.push([0]);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  startGame() {\n    /** Starts running game:\n     * - Sets running state to true\n     * - Sets timeout to run a step after the timeout\n     */\n    this.setState({ running: true });\n    this.timeoutHandler = window.setTimeout(() => {\n      this.runStep();\n    }, this.state.timeOut);\n  }\n\n  pauseGame() {\n    /** Stops running game */\n    this.setState({ running: false });\n  }\n\n  countLivingNeighbours(grid, row, col) {\n    /** Counts number of direct neighbours to a cell that are alive on\n     * a given grid.  Uses neighbours vector to store al permutations\n     */\n    const neighbours = this.state.neighbours;\n    let count = 0;\n    for (let i = 0; i < 8; i++) {\n      const neighbour = neighbours[i];\n      const rown = row + neighbour[0];\n      const coln = col + neighbour[1];\n      if (rown > 0 && coln > 0 && rown < HEIGHT && coln < WIDTH) {\n        if (grid[rown][coln][0] === 1) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  runStep() {\n    /** Runs a generation of the Game of Life\n     * - Checks if running\n     * - Iterates over grid, building the grid for the next generation\n     * based on rules of game of life\n     * - Sets a timeout to run again\n     */\n    if (!this.state.running) {\n      return;\n    }\n    console.log(\"RUNNING\");\n    let oldGrid = this.state.grid;\n    let newGrid = [];\n\n    for (let row = 0; row < HEIGHT; row++) {\n      let newRow = [];\n      for (let col = 0; col < WIDTH; col++) {\n        if (oldGrid[row][col][0] === 0) {\n          if (this.countLivingNeighbours(oldGrid, row, col) === 3) {\n            newRow.push([1]);\n          } else {\n            newRow.push([0]);\n          }\n        } else {\n          const living = this.countLivingNeighbours(oldGrid, row, col);\n\n          if ((living === 2) | (living === 3)) {\n            newRow.push([1]);\n          } else {\n            newRow.push([0]);\n          }\n        }\n      }\n      newGrid.push(newRow);\n    }\n    this.setState({ grid: newGrid });\n\n    this.timeoutHandler = window.setTimeout(() => {\n      console.log(this.state.grid);\n      this.runStep();\n    }, this.state.timeOut);\n  }\n\n  render() {\n    /** render function - renders game of life on screen */\n    const { grid } = this.state;\n    return (\n      <div>\n        {/* Adding header component with Game of Life info */}\n        <header>\n          <Header />\n        </header>\n        {/* Adding controls to grid board */}\n        <Controls\n          reset={() => this.componentDidMount()}\n          start={() => this.startGame()}\n          pause={() => this.pauseGame()}\n        />\n        {/* Render grid of divs representing our board */}\n        <div className=\"board\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx} className=\"cellrow\">\n                {row.map((col, colIdx) => {\n                  const cell_id = [rowIdx, colIdx];\n                  // Passes life prop to div based on value of element\n                  // on grid array\n                  const life =\n                    this.state.grid[rowIdx][colIdx][0] === 1 ? \"alive\" : \"dead\";\n\n                  return (\n                    <Cell\n                      key={cell_id}\n                      id={cell_id}\n                      life={life}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={(row, col) => this.handleMouseUp()}\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        {/* Adds footer component containing other links to the page */}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default GameOfLife;\n","import \"./App.css\";\nimport React, { Component } from \"react\";\n\nimport GameOfLife from \"./components/gameOfLife/gameOfLife\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"App\">\n        <GameOfLife />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}